{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\barot\\\\Documents\\\\GitHub\\\\BookSTack\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid'; //navbar + drawer\n\nimport SideBar from './components/header/sidebar'; // components\n\nimport BaseRouter from './router.js';\nimport MobileAppBar from './components/header/mobileAppBar'; // apollo client setup\n\nvar client = new ApolloClient({\n  uri: 'http://35.154.49.7:4000/graphql'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.setLoginStates = function (data) {\n      _this.setState({\n        isSignedIn: true,\n        UserEmail: data.email,\n        UserEmailvarified: data.emailVerified,\n        UserDisplayName: data.displayName,\n        UserPhoneNumber: data.phoneNumber,\n        UserPhotoUrl: data.photoURL\n      });\n    };\n\n    _this.logout = function () {\n      return _this.setState({\n        isSignedIn: false,\n        UserEmail: null,\n        UserEmailvarified: false,\n        UserDisplayName: null,\n        UserPhoneNumber: null,\n        UserPhotoUrl: null\n      });\n    };\n\n    _this.state = {\n      isSignedIn: false,\n      UserEmail: null,\n      UserEmailvarified: false,\n      UserDisplayName: null,\n      UserPhoneNumber: null,\n      UserPhotoUrl: null,\n      isMobile: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (window.innerWidth < 768) {\n        this.setState({\n          variant: \"temporary\",\n          isMobile: true\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ApolloProvider, {\n        client: client,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        cols: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, this.state.isMobile ? React.createElement(MobileAppBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }) : React.createElement(SideBar, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(BaseRouter, Object.assign({}, this.state, {\n        setLoginStates: this.setLoginStates,\n        logout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\barot\\Documents\\GitHub\\BookSTack\\src\\App.js"],"names":["React","Component","ApolloClient","ApolloProvider","BrowserRouter","Router","Grid","SideBar","BaseRouter","MobileAppBar","client","uri","App","props","setLoginStates","data","setState","isSignedIn","UserEmail","email","UserEmailvarified","emailVerified","UserDisplayName","displayName","UserPhoneNumber","phoneNumber","UserPhotoUrl","photoURL","logout","state","isMobile","window","innerWidth","variant"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,kBAAxC;AACA,OAAOC,IAAP,MAAiB,wBAAjB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,6BAApB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,OAAOC,YAAP,MAAyB,kCAAzB,C,CAEA;;AACA,IAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;AAC5BS,EAAAA,GAAG,EAAE;AADuB,CAAjB,CAAf;;IAIMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;;AADiB,UAanBC,cAbmB,GAaH,UAACC,IAAD,EAAQ;AACpB,YAAKC,QAAL,CAAc;AACbC,QAAAA,UAAU,EAAE,IADC;AAEbC,QAAAA,SAAS,EAACH,IAAI,CAACI,KAFF;AAGbC,QAAAA,iBAAiB,EAAEL,IAAI,CAACM,aAHX;AAIbC,QAAAA,eAAe,EAACP,IAAI,CAACQ,WAJR;AAKbC,QAAAA,eAAe,EAACT,IAAI,CAACU,WALR;AAMbC,QAAAA,YAAY,EAACX,IAAI,CAACY;AANL,OAAd;AASF,KAvBiB;;AAAA,UAyBnBC,MAzBmB,GAyBX;AAAA,aAAI,MAAKZ,QAAL,CAAc;AACxBC,QAAAA,UAAU,EAAE,KADY;AAExBC,QAAAA,SAAS,EAAC,IAFc;AAGxBE,QAAAA,iBAAiB,EAAE,KAHK;AAIxBE,QAAAA,eAAe,EAAC,IAJQ;AAKxBE,QAAAA,eAAe,EAAC,IALQ;AAMxBE,QAAAA,YAAY,EAAC;AANW,OAAd,CAAJ;AAAA,KAzBW;;AAEjB,UAAKG,KAAL,GAAa;AACXZ,MAAAA,UAAU,EAAE,KADD;AAEXC,MAAAA,SAAS,EAAC,IAFC;AAGXE,MAAAA,iBAAiB,EAAE,KAHR;AAIXE,MAAAA,eAAe,EAAC,IAJL;AAKXE,MAAAA,eAAe,EAAC,IALL;AAMXE,MAAAA,YAAY,EAAC,IANF;AAOXI,MAAAA,QAAQ,EAAG;AAPA,KAAb;AAFiB;AAWlB;;;;wCAuBkB;AACjB,UAAGC,MAAM,CAACC,UAAP,GAAkB,GAArB,EAAyB;AACvB,aAAKhB,QAAL,CAAc;AACZiB,UAAAA,OAAO,EAAC,WADI;AAEZH,UAAAA,QAAQ,EAAG;AAFC,SAAd;AAID;AACF;;;6BAEQ;AACP,aACI,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAEpB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,IAAI,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,KAAKmB,KAAL,CAAWC,QAAX,GACA,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GAEA,oBAAC,OAAD,oBAAa,KAAKjB,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,EAKA,oBAAC,UAAD,oBAAgB,KAAKgB,KAArB;AAA4B,QAAA,cAAc,EAAE,KAAKf,cAAjD;AAAiE,QAAA,MAAM,EAAE,KAAKc,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALA,CADF,CADF,CADJ;AAYD;;;;EAzDe3B,S;;AA2DlB,eAAeW,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n//navbar + drawer\r\nimport SideBar from './components/header/sidebar'\r\n\r\n// components\r\nimport BaseRouter from './router.js'\r\n\r\nimport MobileAppBar from './components/header/mobileAppBar'\r\n\r\n// apollo client setup\r\nconst client = new ApolloClient({\r\n    uri: 'http://35.154.49.7:4000/graphql'\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isSignedIn: false,\r\n      UserEmail:null,\r\n      UserEmailvarified: false,\r\n      UserDisplayName:null,\r\n      UserPhoneNumber:null,\r\n      UserPhotoUrl:null,\r\n      isMobile : false,\r\n    }\r\n  }\r\n\r\n  setLoginStates =(data)=>{\r\n      this.setState({\r\n       isSignedIn: true,\r\n       UserEmail:data.email,\r\n       UserEmailvarified: data.emailVerified,\r\n       UserDisplayName:data.displayName,\r\n       UserPhoneNumber:data.phoneNumber,\r\n       UserPhotoUrl:data.photoURL\r\n     });\r\n\r\n   }\r\n\r\n  logout =()=>this.setState({\r\n    isSignedIn: false,\r\n    UserEmail:null,\r\n    UserEmailvarified: false,\r\n    UserDisplayName:null,\r\n    UserPhoneNumber:null,\r\n    UserPhotoUrl:null\r\n  });\r\n\r\n  componentDidMount(){\r\n    if(window.innerWidth<768){\r\n      this.setState({\r\n        variant:\"temporary\",\r\n        isMobile : true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <ApolloProvider client={client}>\r\n          <Router>\r\n            <Grid container cols={2}>\r\n            {\r\n              this.state.isMobile ?\r\n              <MobileAppBar /> : \r\n              <SideBar {...this.props}/>}\r\n            <BaseRouter {...this.state} setLoginStates={this.setLoginStates} logout={this.logout}/></Grid>\r\n          </Router>\r\n        </ApolloProvider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}